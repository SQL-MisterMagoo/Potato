<div class="top-row pl-4 navbar navbar-dark">
	<a class="navbar-brand" href="">Potato</a>
	<button class="navbar-toggler" @onclick="ToggleNavMenu">
		<span class="navbar-toggler-icon"></span>
	</button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
	<Repeater @key="this" Data=Menu>
		<RepeaterTemplate>
			<ul class="nav flex-column">
				@context
			</ul>
		</RepeaterTemplate>
		<RepeaterItemTemplate>
			@context
		</RepeaterItemTemplate>
		<RepeaterField>
			<li class="nav-item px-3">
				@if (string.IsNullOrWhiteSpace(context.RelativeUrl))
				{
				<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
					<span class="oi oi-home" aria-hidden="true"></span> @context.MenuTitle
				</NavLink>
				}
				else
				{
				<NavLink class="nav-link" href=@context.RelativeUrl>
					<span class="oi oi-list-rich" aria-hidden="true"></span> @context.MenuTitle
				</NavLink>
				}
			</li>
		</RepeaterField>
	</Repeater>
</div>


@code {
		private bool collapseNavMenu = true;

		private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

		private void ToggleNavMenu()
		{
			collapseNavMenu = !collapseNavMenu;
		}

		List<MenuData> _Menu;
		List<MenuData> Menu
		{
			get
			{
				if (_Menu is object)
				{
					return _Menu;
				}
				_Menu = new List<MenuData>();
				var assembly = System.Reflection.Assembly.GetExecutingAssembly();
				foreach (var type in 
					assembly
						.GetExportedTypes()
						.Where(type => type.CustomAttributes.Any(attr => attr.AttributeType.Equals(typeof(RouteAttribute))))
						)
				{
					var urlAttr = 
						type
							.CustomAttributes
							.Where(at => at.AttributeType.Equals(typeof(RouteAttribute)))
							.First();
					var titleAttr = 
						type
							.CustomAttributes
							.Where(at => at.AttributeType.Equals(typeof(PageTitleAttribute)))
							.FirstOrDefault();
					
					var url = urlAttr.ConstructorArguments.First().Value.ToString().TrimStart('/');
					var title = titleAttr?.ConstructorArguments.First().Value.ToString() ?? type.Name;
					_Menu.Add(new MenuData { RelativeUrl = url, MenuTitle = title });
					
				}
				_Menu = _Menu.OrderBy(md => md.RelativeUrl).ToList<MenuData>();
				return _Menu;
			}
		}
}
